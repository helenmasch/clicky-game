{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/BravoCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","score","highscore","Card","friends","map","friend","src","image","alt","onClick","friendClicked","id","App","state","userClickId","originalFriends","newFriends","clicked","setState","sort","Math","random","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ixCAIe,SAASA,EAAQC,GAC3B,OACI,yBAAKC,UAAY,aACND,EAAME,UCLX,SAASC,EAAOH,GAC3B,OAGO,oCACD,8CACD,uCAAaA,EAAMI,MAAnB,iBAAwCJ,EAAMK,UAA9C,M,iBCLM,SAASC,EAAKN,GACzB,OACI,yBAAKC,UAAU,OAEVD,EAAMO,QAAQC,KAAI,SAAAC,GACf,OACO,yBAAKR,UAAU,YAClB,yBAAKA,UAAU,aACX,yBAAKS,IAAKD,EAAOE,MAAOV,UAAU,eAAeW,IAAI,MAAMC,QAAS,kBAAIb,EAAMc,cAC7EL,EAAOM,a,ICiFjBC,E,4MArFfC,MAAM,CACJV,QAASA,EACTH,MAAO,EACPC,UAAW,G,EASbS,cAAgB,SAAAI,GACf,IAAMC,EAAkBZ,EAEnBa,EAAa,EAAKH,MAAMV,QAAQC,KAAI,SAAAC,GAsBxC,OArBKS,IAAcT,EAAOM,MACI,IAAjBN,EAAOY,SACRZ,EAAOY,SAAQ,EACZ,EAAKC,SAAS,CACZlB,MAAO,EAAKa,MAAMb,MAAQ,IAIzB,EAAKa,MAAMb,OAAO,EAAKa,MAAMZ,WAC9B,EAAKiB,SAAS,CACZjB,UAAW,EAAKY,MAAMZ,UAAY,KAKzC,EAAKiB,SAAS,CACZlB,MAAO,KAKdK,KAGTW,EAAWG,MAAK,kBAAIC,KAAKC,SAAW,MACpC,EAAKH,SAAS,CACZf,QAASa,IAGY,IAAnB,EAAKH,MAAMb,OAEZ,EAAKkB,SAAS,CACZf,QAASY,K,uDA0BV,OACE,kBAACpB,EAAD,KACI,kBAACI,EAAD,CAASC,MAAOsB,KAAKT,MAAMb,MAAQC,UAAWqB,KAAKT,MAAMZ,YAD7D,kEAGI,kBAACC,EAAD,CAAOC,QAASmB,KAAKT,MAAMV,QAASO,cAAeY,KAAKZ,qB,GA/EhDa,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4dd5bcff.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nexport default function Wrapper(props){\n     return(\n         <div className = \"container\">\n                   {props.children}\n         </div>\n          \n     )\n}","import React from \"react\";\n\nexport default function Header(props){\n    return(\n\n        // skeleton wrapper, has to have one wrapper\n           <>     \n          <h1> Clicky Game! </h1>\n         <h2> Score: {props.score}  High Score: {props.highscore} </h2>\n       </>\n    )\n}","import React, { Component } from \"react\";\nimport './style.css';\n\nexport default function Card(props) {\n    return (\n        <div className=\"row\">\n    \n            {props.friends.map(friend => {\n                return (\n                       <div className=\"col-sm-3\"> \n                    <div className=\"card mt-5\">\n                        <img src={friend.image} className=\"card-img-top\" alt=\"...\" onClick={()=>props.friendClicked\n                        (friend.id)} />\n\n                    </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}","import React,{Component} from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper'\nimport Header from './components/Header'\nimport friends from './bravoimages.json'\nimport Card from './components/BravoCard'\n\nclass App extends Component {\nstate={\n  friends: friends,\n  score: 0,\n  highscore: 0,\n};\n\n// adding on click function\n\n//   this.onClick = this.onClick.bind(this);\n// }\n \n\nfriendClicked = userClickId => {\n const originalFriends = friends\n\nconst newFriends = this.state.friends.map(friend=>{\n    if(userClickId===friend.id){\n            if(friend.clicked===false){\n              friend.clicked=true\n                 this.setState({\n                   score: this.state.score + 1\n                    \n                 })\n\n                 if(this.state.score>=this.state.highscore){\n                   this.setState({\n                     highscore: this.state.highscore + 1 \n                   })\n                 }\n            }\n            else{\n              this.setState({\n                score: 0\n              })\n            }\n    }\n\n  return friend\n})\n\nnewFriends.sort(()=>Math.random() - 0.5)\nthis.setState({\n  friends: newFriends\n})\n\n if(this.state.score===0){\n // originalFriends.sort(()=>Math.random() - 0.5)\n   this.setState({\n     friends: originalFriends\n   })\n } \n \n \n\n// filtering this.state.friends for friends with an id not equal to the id being removed\n// const friends = this.state.friends.filter(friends => friends.id !==id);\n\n// set this.state.friends equal to the new friends array\n// this.setState({ friends });\n// }\n\n// if (friendClicked) {\n\n// for loop to randomly match onclick function\n  // for (let i = 0; i < array.length; i++) {\n  // const element = array[i];\n// }  \n\n// increment the score by 1\n// increaseScore = () => {\n  //this.setState({ count: this.state.count + 1 });\n}\n\n  render(){\n    return (\n      <Wrapper>\n          <Header  score={this.state.score}  highscore={this.state.highscore} />\n          Click any image and don't match the same image unless you lose!\n          <Card  friends={this.state.friends} friendClicked={this.friendClicked} />\n      </Wrapper>\n    );\n  }\n\n}\n\nexport default App;\n\n\n\n\n\n/*\nReact={\nComponent\n}\nReact.Component\n-------destructing ----\nComponent\n\n----------\n\nobj={\n  name:\"phil\",\n  email:\"ploy3_98@yahoo.com\"\n}\n\nobj.name\nobj.email\n\n---destructing---\nconst {name, email}=obj\n\nname\nemail\n\n*/\n// calling backing the wrapper and header once its finished\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}